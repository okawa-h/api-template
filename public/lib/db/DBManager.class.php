<?php

// Generated by Haxe 3.4.7
class db_DBManager {
	public function __construct(){}
	static $_host = "localhost";
	static $_user = "root";
	static $_password = "root";
	static $_connection;
	static function init() {
		$dbName = "test_api-format";
		if(Main::isPublicServer()) {
			db_DBManager::setup("xxxx", "xxxx", "xxxx");
			$dbName = "public";
		}
		db_DBManager::$_connection = db_DBManager::createConnection($dbName, "utf8mb4");
	}
	static function setup($host, $user, $password) {
		db_DBManager::$_host = $host;
		db_DBManager::$_user = $user;
		db_DBManager::$_password = $password;
	}
	static function createConnection($dbName, $charset = null) {
		if($charset === null) {
			$charset = "utf8";
		}
		$dsn = "mysql:host=" . _hx_string_or_null(db_DBManager::$_host) . ";dbname=" . _hx_string_or_null($dbName) . ";charset=" . _hx_string_or_null($charset);
		return php_db_PDO::open($dsn, db_DBManager::$_user, db_DBManager::$_password, null);
	}
	static function request($sql) {
		$results = db_DBManager::$_connection->request($sql)->results();
		$resultList = (new _hx_array(array()));
		{
			$info = $results->iterator();
			while($info->hasNext()) {
				$info1 = $info->next();
				$resultList->push($info1);
				unset($info1);
			}
		}
		return $resultList;
	}
	static function select($table, $columns = null, $where = null, $orderby = null) {
		if($columns === null) {
			$columns = (new _hx_array(array("*")));
		}
		$sql = "select " . _hx_string_or_null($columns->join(",")) . " from " . _hx_string_or_null($table);
		if($where !== null) {
			$sql = _hx_string_or_null($sql) . _hx_string_or_null((" where " . _hx_string_or_null(db_DBManager::getJoined($where, null))));
		}
		if(0 < strlen($orderby)) {
			$sql = _hx_string_or_null($sql) . _hx_string_or_null((" order by " . _hx_string_or_null($orderby)));
		}
		return db_DBManager::request($sql);
	}
	static function insert($table, $data) {
		$keys = (new _hx_array(array()));
		$values = (new _hx_array(array()));
		{
			$key = $data->keys();
			while($key->hasNext()) {
				$key1 = $key->next();
				$keys->push($key1);
				$values->push("\"" . _hx_string_or_null($data->get($key1)) . "\"");
				unset($key1);
			}
		}
		$tmp = "insert into " . _hx_string_or_null($table) . " (" . _hx_string_or_null($keys->join(",")) . ") values (";
		db_DBManager::request(_hx_string_or_null($tmp) . _hx_string_or_null($values->join(",")) . ")");
	}
	static function update($table, $data, $where) {
		$now = Date::now()->toString();
		$data->set("updated_datetime", $now);
		if(!db_DBManager::exists($table, $where)) {
			$data->set("created_datetime", $now);
			db_DBManager::insert($table, $data);
			return;
		}
		$tmp = "update " . _hx_string_or_null($table) . " set " . _hx_string_or_null(db_DBManager::getJoined($data, ",")) . " where ";
		db_DBManager::request(_hx_string_or_null($tmp) . _hx_string_or_null(db_DBManager::getJoined($where, null)));
	}
	static function exists($table, $where) {
		return 0 < db_DBManager::select($table, (new _hx_array(array("id"))), $where, null)->length;
	}
	static function getJoined($map, $separator = null) {
		if($separator === null) {
			$separator = " and ";
		}
		$array = (new _hx_array(array()));
		{
			$key = $map->keys();
			while($key->hasNext()) {
				$key1 = $key->next();
				$array->push(_hx_string_or_null($key1) . _hx_string_or_null((" = \"" . _hx_string_or_null($map->get($key1)) . "\"")));
				unset($key1);
			}
		}
		return $array->join($separator);
	}
	function __toString() { return 'db.DBManager'; }
}
