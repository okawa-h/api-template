<?php

// Generated by Haxe 3.4.7
class db_table_Table {
	public function __construct($tableName, $columnMap) {
		if(!php_Boot::$skip_constructor) {
		$this->_tableName = $tableName;
		$this->_columnMap = $columnMap;
	}}
	public $_tableName;
	public $_columnMap;
	public function getTableName() {
		return $this->_tableName;
	}
	public function getById($id, $columns = null) {
		$tmp = $this->_tableName;
		$_g = new haxe_ds_StringMap();
		$_g->set("id", $id);
		return _hx_array_get(db_DBManager::select($tmp, $columns, $_g, null), 0);
	}
	public function getLatestRowById($columns = null) {
		return _hx_array_get(db_DBManager::select($this->_tableName, $columns, null, "id desc limit 1"), 0);
	}
	public function getFilterList($columns, $where, $orderby = null) {
		return db_DBManager::select($this->_tableName, $columns, $where, $orderby);
	}
	public function getList($columns = null, $isIncludeActive = null, $orderby = null) {
		if($isIncludeActive === null) {
			$isIncludeActive = true;
		}
		$where = null;
		if($isIncludeActive) {
			$_g = new haxe_ds_StringMap();
			$_g->set("is_active", "1");
			$where = $_g;
		} else {
			$where = null;
		}
		return db_DBManager::select($this->_tableName, $columns, $where, $orderby);
	}
	public function setRow($row) {
		$row = $this->validateColumns($row);
		db_DBManager::insert($this->_tableName, $row);
	}
	public function setRows($rowList) {
		$_g1 = 0;
		$_g = $rowList->length;
		while($_g1 < $_g) {
			$_g1 = $_g1 + 1;
			$i = $_g1 - 1;
			$this->setRow($rowList[$i]);
			unset($i);
		}
	}
	public function enable($id) {
		$tmp = $this->_tableName;
		$_g = new haxe_ds_StringMap();
		$_g->set("is_active", "1");
		$_g1 = new haxe_ds_StringMap();
		$_g1->set("id", $id);
		db_DBManager::update($tmp, $_g, $_g1);
	}
	public function disable($id) {
		$tmp = $this->_tableName;
		$_g = new haxe_ds_StringMap();
		$_g->set("is_active", "0");
		$_g1 = new haxe_ds_StringMap();
		$_g1->set("id", $id);
		db_DBManager::update($tmp, $_g, $_g1);
	}
	public function isDisable($id) {
		return _hx_equal($this->getById($id, (new _hx_array(array("is_active")))), "0");
	}
	public function validateColumns($row) {
		{
			$key = $row->keys();
			while($key->hasNext()) {
				$key1 = $key->next();
				if(!$this->_columnMap->exists($key1)) {
					$row->remove($key1);
				}
				unset($key1);
			}
		}
		return $row;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'db.table.Table'; }
}
